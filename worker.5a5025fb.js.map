{"mappings":"YAEe,MAAAA,EAGHC,aAAAA,IAAkDC,IACjDC,MAAAA,IAAwBC,EAEjCC,YACaC,EACFC,EAGK,eAJHD,OAAAA,OACFC,WAAAA,EAKPC,KAAKC,MCbN,SAA+BC,OAE9BC,EAeD,SAAuBD,EAAe,SACrCD,EAAAA,WACKG,EAAI,EAAGA,GAAKF,EAAME,IACvBH,EAAMI,KAAKD,UAERH,EApBGK,CAAcJ,WAGfE,EAAID,EAAIL,OAAS,EAAGM,EAAI,EAAGA,IAAAA,OAC1BG,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,IACpCD,EAAIC,GAAID,EAAII,IAAAA,CAAOJ,EAAII,GAAIJ,EAAIC,WAE7BD,EDIEF,CAA8BH,GAGvCa,IAAIC,UACAZ,KAAKL,MAAMkB,QAIJb,KAAKC,MAAMW,GAEtBE,KAAKC,EAAeC,GAChBhB,KAAKL,MAAMsB,QAEXjB,KAAKkB,KAAKH,EAAOI,EAAaC,MAAMF,KAAKF,EAAQG,EAAaC,OAE7DpB,KAAKC,MAAMc,GAAQf,KAAKC,MAAMe,IAAAA,CAC3BhB,KAAKW,IAAIK,GACThB,KAAKW,IAAII,IAGjBM,KAAKC,EAAcC,GACfvB,KAAKL,MAAM6B,QAEXxB,KAAKkB,KAAKK,EAAIJ,EAAaC,YAErBK,EAAOzB,KAAKW,IAAIW,GACtBtB,KAAKC,MAAMyB,OAAOJ,EAAM,GACxBtB,KAAKC,MAAMyB,OAAOH,EAAI,EAAGE,GAG7BE,eAAeZ,EAAeC,UAC1BhB,KAAKkB,KAAKH,EAAOI,EAAaS,YAAYV,KACtCF,EACAG,EAAaS,YAGV5B,KAAK6B,cAAc7B,KAAKW,IAAII,GAAQf,KAAKW,IAAIK,IAExDa,cAAcd,EAAeC,UACzBhB,KAAKL,MAAMmC,kBACAC,EAAiBhB,EAAQC,GAGxCE,KACIN,EACAnB,EACAuC,UAEIhC,KAAKP,aAAakB,IAAIC,IAAQqB,aAC9BjC,KAAKP,aAAayC,IACdtB,EAAAA,IACIuB,EAAiB1C,EAAcuC,IAGpChC,KAEXoC,OAAOxB,UACHZ,KAAKP,aAAa4C,OAAOzB,GAClBZ,KAGXsC,qBACUC,EAAWvC,KAAKwC,cAEtBxC,KAAKP,aAAagD,SAAQ,CAAChD,EAAciD,KAChCjD,EAAawC,aACdjC,KAAKP,aAAa4C,OAAOK,MAIjC1C,KAAKD,WAAWwC,EAAUvC,MAG9BwC,yBACeG,EAAc3C,KAAKC,MAAOD,KAAKP,eAI3C,MAAAkD,EAIH9C,YAAYI,EAAiBR,GACzBO,KAAKC,MAAQA,EAAM2C,QACnB5C,KAAKP,aAAAA,IAAmBC,IAAID,IAO7B,MAAAG,EACHiB,MAAgB,EAChBI,MAAgB,EAChBO,MAAgB,EAChBM,YAAsB,MAIdX,MAAA0B,GAAAA,EAAA1B,IAAAA,EAAAA,KAAA0B,QAAAA,QAAAA,EAAAA,MAAAA,OAAAA,EAAAA,WAAAA,QAAAA,EAAAA,KAAAA,MAOL,MAAAV,EACHtC,YACaiD,EACAb,GAAuB,QADvBa,KAAAA,OACAb,YAAAA,GAOV,MAAAF,EACHlC,YAAqBkD,QAAAA,OAAAA,yBAIV/C,KAAK+C,OAAS,gCAGd/C,KAAK+C,QAAU,sBAGf/C,KAAK+C,OAAS,6BAGd/C,KAAK+C,QAAU,uBAGA,GAAf/C,KAAK+C,QE/IpBC,UAAaC,eAELC,EAAAA,UACAC,GACqCF,EAAQG,KAE3CnD,EAAAA,IAAAA,EAAwBkD,EAAWE,GACnCC,EAAAA,IAASC,SAAS,UAAYL,EAA9BI,GACNrD,EAAMqC,eAENkB,QAAQC,IAAIH,GAEZA,EAAGrD,UAGDoD,EAAmBd,IACpBmB,KAAaC,YAAYpB","sources":["./src/sorting/VisualArray.ts","./src/sorting/util.ts","./src/worker.ts"],"sourcesContent":["import { generateShuffledArray } from './util';\n\nexport default class VisualArray {\n    private array: number[];\n    // cleared on takeSnapshot()\n    private highlighting: Map<number, HighlightingInfo> = new Map();\n    readonly stats: ArrayStats = new ArrayStats();\n\n    constructor(\n        readonly length: number,\n        public onSnapshot: (\n            snapshot: ArraySnapshot,\n            array: VisualArray\n        ) => void = () => {}\n    ) {\n        this.array = generateShuffledArray(length);\n    }\n\n    get(index: number): number {\n        this.stats.reads++;\n\n        // no highlighting\n\n        return this.array[index];\n    }\n    swap(first: number, second: number): void {\n        this.stats.swaps++;\n\n        this.mark(first, Highlighting.MOVE).mark(second, Highlighting.MOVE);\n\n        [this.array[first], this.array[second]] = [\n            this.get(second),\n            this.get(first),\n        ];\n    }\n    move(from: number, to: number): void {\n        this.stats.moves++;\n\n        this.mark(to, Highlighting.MOVE);\n\n        const temp = this.get(from);\n        this.array.splice(from, 1);\n        this.array.splice(to, 0, temp);\n    }\n\n    compareIndexes(first: number, second: number): ComparisonResult {\n        this.mark(first, Highlighting.COMPARISON).mark(\n            second,\n            Highlighting.COMPARISON\n        );\n\n        return this.compareValues(this.get(first), this.get(second));\n    }\n    compareValues(first: number, second: number): ComparisonResult {\n        this.stats.comparisons++;\n        return new ComparisonResult(first - second);\n    }\n\n    mark(\n        index: number,\n        highlighting: Highlighting,\n        temporary?: boolean\n    ): VisualArray {\n        if (this.highlighting.get(index)?.isPermanent) {\n            this.highlighting.set(\n                index,\n                new HighlightingInfo(highlighting, temporary)\n            );\n        }\n        return this;\n    }\n    unmark(index: number): VisualArray {\n        this.highlighting.delete(index);\n        return this;\n    }\n\n    takeSnapshot(): void {\n        const snapshot = this.getSnapshot();\n\n        this.highlighting.forEach((highlighting, key) => {\n            if (!highlighting.isPermanent) {\n                this.highlighting.delete(key);\n            }\n        });\n\n        this.onSnapshot(snapshot, this);\n    }\n\n    getSnapshot(): ArraySnapshot {\n        return new ArraySnapshot(this.array, this.highlighting);\n    }\n}\n\nexport class ArraySnapshot {\n    readonly array: Readonly<number[]>;\n    readonly highlighting: Readonly<Map<number, HighlightingInfo>>;\n\n    constructor(array: number[], highlighting: Map<number, HighlightingInfo>) {\n        this.array = array.slice();\n        this.highlighting = new Map(highlighting);\n    }\n}\n\n/**\n * Represents statistics of an array\n */\nexport class ArrayStats {\n    reads: number = 0;\n    swaps: number = 0;\n    moves: number = 0;\n    comparisons: number = 0;\n}\n\n// colors\nexport enum Highlighting {\n    DEFAULT = 'black',\n    INDEX = 'blue',\n    COMPARISON = 'green',\n    MOVE = 'red',\n}\n\nexport class HighlightingInfo {\n    constructor(\n        readonly type: Highlighting,\n        readonly isPermanent: boolean = true\n    ) {}\n}\n\n/**\n * Convenience class that makes everything pretty âœ¨\n */\nexport class ComparisonResult {\n    constructor(readonly result: number) {}\n\n    // getters because it looks cleaner imo\n    get isGreater() {\n        return this.result > 0;\n    }\n    get isGreaterOrEqual() {\n        return this.result >= 0;\n    }\n    get isLess() {\n        return this.result < 0;\n    }\n    get isLessOrEqual() {\n        return this.result <= 0;\n    }\n    get isEqual() {\n        return this.result == 0;\n    }\n}\n","//  functions that just make life easier :)\n\nexport function generateShuffledArray(size: number) {\n    // [1, 2, 3, 4...]\n    let arr = generateArray(size);\n\n    // fisher yates algorithm\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\n/**\n * Generates sorted array\n * @param end - exclusive\n * @returns - array incrementing up by 1\n */\nexport function generateArray(size: number = 100): number[] {\n    let array: number[] = [];\n    for (let i = 1; i <= size; i++) {\n        array.push(i);\n    }\n    return array;\n}\n\nexport function delay(ms = 1000): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import VisualArray, {\n    ArraySnapshot,\n    Highlighting,\n} from './sorting/VisualArray';\n\nonmessage = (message) => {\n    const {\n        sort,\n        arraySize,\n    }: { sort: string; arraySize: number } = message.data;\n\n    const array = new VisualArray(arraySize, snapshotHandler);\n    const fn = new Function('return ' + sort)(); // deserialize\n    array.takeSnapshot();\n\n    console.log(fn);\n\n    fn(array);\n};\n\nconst snapshotHandler = (snapshot: ArraySnapshot) => {\n    (self as any).postMessage(snapshot);\n};\n"],"names":["$33d173f7018e63be34231bd98cf292af$export$default","highlighting","Map","stats","$33d173f7018e63be34231bd98cf292af$export$ArrayStats","constructor","length","onSnapshot","this","array","size","arr","i","push","$1d2d745817882de7aa648d2af8d4bd7c$export$generateArray","j","Math","floor","random","get","index","reads","swap","first","second","swaps","mark","$33d173f7018e63be34231bd98cf292af$export$Highlighting","MOVE","move","from","to","moves","temp","splice","compareIndexes","COMPARISON","compareValues","comparisons","$33d173f7018e63be34231bd98cf292af$export$ComparisonResult","temporary","isPermanent","set","$33d173f7018e63be34231bd98cf292af$export$HighlightingInfo","unmark","delete","takeSnapshot","snapshot","getSnapshot","forEach","key","$33d173f7018e63be34231bd98cf292af$export$ArraySnapshot","slice","Highlighting","type","result","onmessage","message","sort","arraySize","data","$a427672de44ee67afec3e85d079abc00$var$snapshotHandler","fn","Function","console","log","self","postMessage"],"version":3,"file":"worker.5a5025fb.js.map"}