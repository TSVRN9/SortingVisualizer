{"mappings":"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","sources":["./src/sorting/VisualArray.ts","./src/sorting/AlgorithmList.ts","./src/worker.ts"],"sourcesContent":["import { generateShuffledArray } from './util';\n\nexport default class VisualArray {\n    // cleared on takeSnapshot()\n    private highlighting: Map<number, HighlightingInfo> = new Map();\n    readonly stats: ArrayStats = new ArrayStats();\n\n    constructor(\n        private array: number[],\n        public onSnapshot: (\n            snapshot: ArraySnapshot,\n            array: VisualArray\n        ) => void = () => {}\n    ) {}\n\n    get length() {\n        return this.array.length;\n    }\n\n    get(index: number): number {\n        this.stats.reads++;\n\n        // no highlighting\n\n        return this.array[index];\n    }\n    swap(first: number, second: number): void {\n        this.stats.swaps++;\n\n        this.mark(first, Highlighting.MOVE).mark(second, Highlighting.MOVE);\n\n        [this.array[first], this.array[second]] = [\n            this.get(second),\n            this.get(first),\n        ];\n    }\n    move(from: number, to: number): void {\n        this.stats.moves++;\n\n        this.mark(to, Highlighting.MOVE);\n\n        const temp = this.get(from);\n        this.array.splice(from, 1);\n        this.array.splice(to, 0, temp);\n    }\n\n    compareIndexes(first: number, second: number): ComparisonResult {\n        this.mark(first, Highlighting.COMPARISON).mark(\n            second,\n            Highlighting.COMPARISON\n        );\n\n        return this.compareValues(this.get(first), this.get(second));\n    }\n    compareValues(first: number, second: number): ComparisonResult {\n        this.stats.comparisons++;\n        return new ComparisonResult(first - second);\n    }\n\n    mark(\n        index: number,\n        highlighting: Highlighting,\n        permanent: boolean = false\n    ): VisualArray {\n        if (!this.highlighting.get(index)?.isPermanent) {\n            this.highlighting.set(\n                index,\n                new HighlightingInfo(highlighting, permanent)\n            );\n        }\n        return this;\n    }\n    unmark(index: number): VisualArray {\n        this.highlighting.delete(index);\n        return this;\n    }\n\n    takeSnapshot(): void {\n        const snapshot = this.getSnapshot();\n\n        this.highlighting.forEach((highlighting, key) => {\n            if (!highlighting.isPermanent) {\n                this.highlighting.delete(key);\n            }\n        });\n\n        this.onSnapshot(snapshot, this);\n    }\n\n    getSnapshot(): ArraySnapshot {\n        return new ArraySnapshot(this.array, this.highlighting);\n    }\n}\n\nexport class ArraySnapshot {\n    readonly array: Readonly<number[]>;\n    readonly highlighting: Readonly<Map<number, HighlightingInfo>>;\n\n    constructor(array: number[], highlighting: Map<number, HighlightingInfo>) {\n        this.array = array.slice();\n        this.highlighting = new Map(highlighting);\n    }\n}\n\n/**\n * Represents statistics of an array\n */\nexport class ArrayStats {\n    reads: number = 0;\n    swaps: number = 0;\n    moves: number = 0;\n    comparisons: number = 0;\n}\n\n// colors\nexport enum Highlighting {\n    DEFAULT = 'black',\n    INDEX = 'blue',\n    COMPARISON = 'green',\n    MOVE = 'red',\n}\n\nexport class HighlightingInfo {\n    constructor(\n        readonly type: Highlighting,\n        readonly isPermanent: boolean = true\n    ) {}\n}\n\n/**\n * Convenience class that makes everything pretty âœ¨\n */\nexport class ComparisonResult {\n    constructor(readonly result: number) {}\n\n    // getters because it looks cleaner imo\n    get isGreater() {\n        return this.result > 0;\n    }\n    get isGreaterOrEqual() {\n        return this.result >= 0;\n    }\n    get isLess() {\n        return this.result < 0;\n    }\n    get isLessOrEqual() {\n        return this.result <= 0;\n    }\n    get isEqual() {\n        return this.result == 0;\n    }\n}\n","import VisualArray, { Highlighting } from './VisualArray';\n\n// Exports are at the bottom to avoid forward delarations\n\nfunction algorithmInfo(\n    description: string,\n    sort: SortingImplementation\n): AlgorithmInfo {\n    return {\n        description: description,\n        sort: sort,\n    };\n}\n\n/**\n * Removes all newlines from a string\n */\nfunction oneline(str: string) {\n    return str.replace(/\\n/g, '');\n}\n\n// ALGORITHMS\n\nconst bubbleSortDescription = oneline(\n    `Bubble sort is a simple sorting algorithm that compares 2 adjacent values and swaps them if they're not in relative order.\n As a side effect of this, the largest values \"bubble\" to the top. \n The cost of using this algorithm scales exponentially with a time complexity of O(n^2).\n This algorithm splits the array into 2 sections: sorted and unsorted. \n The space complexity is O(1)`\n);\n\nconst bubbleSort: SortingImplementation = (arr) => {\n    for (let i = 0; i < arr.length - 1; i++) {\n        const sortedIndex = arr.length - i - 1;\n        arr.mark(sortedIndex, Highlighting.INDEX, true);\n\n        let swapped = false;\n\n        for (let j = 0; j < sortedIndex; j++) {\n            if (arr.compareIndexes(j, j + 1).isGreater) {\n                arr.swap(j, j + 1);\n                swapped = true;\n            }\n            arr.takeSnapshot();\n        }\n\n        arr.unmark(sortedIndex);\n\n        if (!swapped) {\n            return arr;\n        }\n    }\n    return arr;\n};\n\nconst selectionSortDescription = oneline(\n    `Selection sort sorts by finding the smallest value and bringing it to the beginning.\n Similar to bubble sorting, it splits the array into a sorted side and an unsorted side.\n It swaps less compared to bubble sorting, as it only swaps after searching the entire unsorted subarray.\n The time complexity is O(n^2) and the space complexity is O(1).`\n);\n\nconst selectionSort: SortingImplementation = (arr) => {\n    for (let i = 0; i < arr.length - 1; i++) {\n        let minIndex = i;\n\n        for (let j = i + 1; j < arr.length; j++) {\n            arr.mark(i, Highlighting.INDEX);\n            if (arr.compareIndexes(j, minIndex).isLess) {\n                minIndex = j;\n            }\n            arr.takeSnapshot();\n        }\n        arr.swap(i, minIndex);\n\n        arr.unmark(i);\n    }\n    return arr;\n};\n\nconst insertionSortDescription: string = oneline(\n    `Insertion sort is a common algorithm used to sort cards in real life.\n The array is split into 2 sections, a (relatively) sorted and unsorted subarray.\n Elements are taken from the unsorted side and are inserted in the sorted side in order.\n Time complexity is O(n^2) and space complexity is O(1)`\n);\n\nconst insertionSort: SortingImplementation = (arr) => {\n    for (let i = 1; i < arr.length; i++) {\n        for (let j = i - 1; j >= 0; j--) {\n            if (arr.compareIndexes(j, j + 1).isGreater) {\n                arr.swap(j, j + 1);\n                arr.takeSnapshot();\n            } else {\n                arr.takeSnapshot();\n                break;\n            }\n        }\n    }\n    return arr;\n};\n\nconst quickSortDescription: string = oneline(\n    `Quick sort is a commonly used algorithm with a worst case runtime complexity of n^2.\n Although on average, it has a time complexity of n log n.\n Like the name suggests, quick sort is pretty quick.`\n);\n\nconst quickSort: SortingImplementation = (arr) => {\n    sort();\n    return arr;\n\n    /**\n     * @param min - inclusive\n     * @param max - inclusive\n     */\n    function sort(min = 0, max = arr.length - 1): void {\n        if (arr.compareValues(min, max).isGreaterOrEqual) {\n            return;\n        }\n\n        const partitionIndex = partition(min, max);\n\n        // sort left and right\n        sort(min, partitionIndex - 1);\n        sort(partitionIndex + 1, max);\n    }\n\n    /**\n     * @param min - inclusive\n     * @param max - inclusive\n     * @returns index of pivot\n     */\n    function partition(min: number, max: number): number {\n        // const pivotIndex = max;\n        let i = min - 1; // immediately incremented\n\n        for (let j = min; j < max; j++) {\n            arr.takeSnapshot();\n            if (arr.compareIndexes(j, max).isLessOrEqual) {\n                i++;\n                arr.swap(i, j);\n            }\n        }\n\n        // new pivotIndex thing\n        i++;\n        arr.swap(i, max);\n        return i;\n    }\n};\n\n// class to allow use of webworker\nexport class AlgorithmList {\n    readonly list: Record<string, AlgorithmInfo> = {\n        'Bubble Sort': algorithmInfo(bubbleSortDescription, bubbleSort),\n        'Selection Sort': algorithmInfo(\n            selectionSortDescription,\n            selectionSort\n        ),\n        'Insertion Sort': algorithmInfo(\n            insertionSortDescription,\n            insertionSort\n        ),\n        'Quick Sort': algorithmInfo(quickSortDescription, quickSort),\n    };\n\n    get names() {\n        return Object.keys(this.list);\n    }\n\n    get length() {\n        return this.names.length;\n    }\n}\n\nexport type SortingImplementation = (array: VisualArray) => VisualArray;\nexport type AlgorithmInfo = {\n    description: string;\n    sort: SortingImplementation;\n};\n","import { AlgorithmList } from './sorting/AlgorithmList';\nimport VisualArray, { ArraySnapshot } from './sorting/VisualArray';\n\nconst list = new AlgorithmList().list;\nonmessage = (message) => {\n    const { name, array }: { name: string; array: number[] } = message.data;\n\n    console.log(name);\n\n    const visualArray = new VisualArray(array, snapshotHandler);\n\n    // start sorting!!\n    list[name].sort(visualArray);\n    visualArray.takeSnapshot(); // last highlighting\n    visualArray.takeSnapshot(); // frame w/o highlighting\n\n    self.close();\n};\n\nconst snapshotHandler = (snapshot: ArraySnapshot) => {\n    (self as any).postMessage(snapshot);\n};\n"],"names":["$33d173f7018e63be34231bd98cf292af$export$default","highlighting","Map","stats","$33d173f7018e63be34231bd98cf292af$export$ArrayStats","constructor","array","onSnapshot","this","length","get","index","reads","swap","first","second","swaps","mark","$33d173f7018e63be34231bd98cf292af$export$Highlighting","MOVE","move","from","to","moves","temp","splice","compareIndexes","COMPARISON","compareValues","comparisons","$33d173f7018e63be34231bd98cf292af$export$ComparisonResult","permanent","isPermanent","set","$33d173f7018e63be34231bd98cf292af$export$HighlightingInfo","unmark","delete","takeSnapshot","snapshot","getSnapshot","forEach","key","$33d173f7018e63be34231bd98cf292af$export$ArraySnapshot","slice","Highlighting","type","result","$1c4e41b8e147972dc2cd0757b76aa39b$var$algorithmInfo","description","sort","$1c4e41b8e147972dc2cd0757b76aa39b$var$oneline","str","replace","$1c4e41b8e147972dc2cd0757b76aa39b$var$bubbleSortDescription","$1c4e41b8e147972dc2cd0757b76aa39b$var$bubbleSort","arr","i","sortedIndex","INDEX","swapped","j","isGreater","$1c4e41b8e147972dc2cd0757b76aa39b$var$selectionSortDescription","$1c4e41b8e147972dc2cd0757b76aa39b$var$selectionSort","minIndex","isLess","$1c4e41b8e147972dc2cd0757b76aa39b$var$insertionSortDescription","$1c4e41b8e147972dc2cd0757b76aa39b$var$insertionSort","$1c4e41b8e147972dc2cd0757b76aa39b$var$quickSortDescription","$1c4e41b8e147972dc2cd0757b76aa39b$var$quickSort","min","max","isGreaterOrEqual","partitionIndex","isLessOrEqual","partition","$a427672de44ee67afec3e85d079abc00$var$list","list","Bubble Sort","Selection Sort","Insertion Sort","Quick Sort","Object","keys","names","onmessage","message","name","data","console","log","visualArray","$a427672de44ee67afec3e85d079abc00$var$snapshotHandler","self","close","postMessage"],"version":3,"file":"worker.47eebc7d.js.map"}